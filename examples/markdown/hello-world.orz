<!-- 
.. title: Orez 的 Hello World 示例
.. slug: orez-hello-world
.. date: 2016-07-22 21:17:05 UTC+08:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
-->

在 C 语言中，可以用以下语句在屏幕上显示 "`hello, world`"：

@ 在屏幕上显示 "hello, world" # [C]
printf("hello, world\n");
@

上述语句是对一个 C 函数的调用语句。这个 C 函数，其名为 `printf`。函数名后的圆括号内包含的是这个函数所接受的值（通常称之为**参数**）。

每个 C 函数，本质上是一组机器指令与数据的组合。要让 CPU 执行这些指令，必须确定一个起点。在每个 C 程序中，都有一个名为 `main` 的特殊的函数，它便是这个起点。要执行上述 `printf` 函数的调用语句，必须将其置于 `main` 函数之内，即：

@ main 函数的定义 #
int main(void) {
        # 在屏幕上显示 "hello, world" @
        return 0;
}
@

虽然 `main` 函数是一个非常特殊的函数，但在形式上它是一个很简单的函数，上述代码定义了这个函数。

在一个函数的定义中，函数名之后的圆括号内的 `void` 表示这个函数不接受任何参数。函数名之前的字符表示函数返回值的类型。在上例中，`main` 函数返回 `int` 类型的值，即整数。圆括号之后的一对花括号所包含的内容称为函数体。函数体内出现的 `return` 语句表示函数执行至此便终止，将某个值返回。

任何一个函数需要定义之后方能被调用。由于函数的定义中包含了这个函数的类型信息。C 编译器在遇到函数调用语句时，会按照函数调用语句的格式从已定义的函数中查找格式相符的函数，然后执行其体内的机器指令。在上述 `printf` 函数的调用语句中，由于所调用的 `printf` 函数并非我们定义，而是由他人定义。所以 C 编译器在遇到 `printf` 函数的调用语句时，会因为无法确定 `printf` 函数的类型信息而给出一个警告：

> 注：更准确的说，`printf` 函数的定义由 C 标准库提供。所谓 C 标准库，是包含一组基础 C 函数的定义的二进制文件。

```text
implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
```

这条警告的意思是，编译器没能从我们的代码中发现 `printf` 的类型信息，因此会将其视为一个隐式函数，它会按照一种默认规则来处理这条调用语句——很多时候，这种默认规则给出的处理结果并不是我们所期望的。

若想让函数的调用语句得到正确的处理，必须在其之前的某个位置给出这个函数的类型信息（通常称为**函数声明**）。对于本文的示例而言，由于 `printf` 函数的调用语句出现于 `main` 函数体内，所以可将 `printf` 函数的声明放在 `main` 函数的定义之前，即：

@ 可正确调用 printf 函数的 main 函数 #
int printf(const char *format, ...);
# main 函数的定义 @
@

C 代码需以文件为载体方能传递给 C 编译器。由于大部分 C 编译器会将扩展名为 `.c` 的文件视为存放 C 语言代码的文件，因此可将上述代码放入 hello-world.c 文件。可以使用 orez 从本文档中提取源码域『可正确调用 printf 函数的 main 函数』，将所提取的源码写入 hello-world.c 文件中，即执行下面这条命令：

```console
$ orez --tangle --entrance="可正确调用 printf 函数的 main 函数" --output=hello-world.c ./hell-world.orz

或

$ orez -t -e "可正确调用 printf 函数的 main 函数" -o hello-world.c ./hell-world.orz
```

其中，hello-world.orz 便是本文档对应的文件名。

获得 hello-world.c 文件之后，可使用 GNU 项目提供的 C 编译器 gcc 对其中的代码进行编译：

```console
$ gcc -c hello-world.c -o hello-world.o
```

gcc 的输出的文件 hello-world.o 称为**目标文件**，它便是 hello-world.c 的编译结果。目标文件中包含着编译器基于 C 语言代码生成的机器指令，但是它还不是一个可执行的程序。这是因为 `printf` 函数的定义（或者说 `printf` 函数所囊括的机器指令）位于 C 标准库文件之内，所以 hello-world.o 中所调用的 `printf` 函数有名而无实。需要想办法在 hello-world.o 中 `printf` 函数的调用位置处放上两个地址，一个地址指向 C 标准库中 `printf` 函数定义位置的地址，另一地址就是当前 `printf` 函数的调用位置。CPU 通过这两个地址可以在 `printf` 函数的调用位置与 `printf` 函数的定义位置之间进行跳转，以执行 `printf` 函数，这个过程结束后再继续执行 `printf` 函数调用语句之后的代码。这个在函数调用位置处放置地址的过程，称为**连接**，由连接器来完成。

GNU 项目提供的连接器是 ld，但是直接使用它来完成 hello-world.o 与 C 标准库文件的连接，所涉及的细节知识太多。gcc 将这些细节封装了起来，当向它提供目标文件时，它会执行正确的连接过程，即：

```console
$ gcc -lc hello-world.o -o hello-world
```

其中，`-lc` 选项可以省略，因为它的意思是连接 C 标准库文件（在 Linux 系统中，即 /usr/lib/libc.so），而所有的 C 程序都需要链接这个库文件。最终所得 hello-world 是可执行的程序。执行这个程序，便可在屏幕上显示 "`hello, world`"：

```console
$ ./hello-world
hello, world
```

若每调用一个 C 标准库中的函数，便为其添加声明语句，这显然极为不便。为此，C 标准库的开发者将这些函数的声明放置在后缀名为 `.h` 的文件中，我们使用 `#include <.h 文件>` 指令便可将其中的函数声明全部载入。例如，`printf` 函数的声明语句位于 stdio.h 文件，只需使用 `#include <stdio.h>` 便可将其载入。这是使用 C 标准库以及其他 C 函数库的标准做法。现在，可以写一个比较标准的 Hello Wrold 程序了，即：

@ 标准的 Hello World 程序 #
#include <stdio.h>
# main 函数的定义 @
@

使用 orez 命令重新从这份文档中提取 C 代码：

```console
$ orez -t -e "标准的 Hello World 程序" -o hello-world.c hello-world.orz
```

gcc 可以将 C 代码的编译与连接这两个步骤合并起来，即：

```console
$ gcc -o hello-world hello-world.c
```

